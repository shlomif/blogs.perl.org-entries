<?xml version="1.0" encoding="utf-8"?>
<!-- vim: set indentexpr=:   -->
<!DOCTYPE
    html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
    "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-US">
<head>
<title>blogs.perl.org Blog</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<style type="text/css">
div.entry
{
    border: darkgreen solid medium;
    padding: 0.5em;
    margin: 0.5em;
}
</style>
</head>
<body>

<div class="entry" id="text-table-1">

<ul class="info">
<li><b>Date:</b> 21-04-2011</li>
</ul>

<h1>Introduction to blogs.perl.org + Text::Table</h1>

<p>
Hello, Perl bloggers! I decided to start 
blogging about a most of my exclusively Perl-related stuff here on 
blogs.perl.org, in hope of getting more comments 
from active Perlers. (Until now, I've blogged about it 
<a href="http://shlomif-tech.livejournal.com/">on
my technical LiveJournal blog</a> and previously on 
<a href="http://use.perl.org/~Shlomi+Fish/journal/">use.perl.org Journal</a>.).
You can learn more about me on <a href="http://www.shlomifish.org/">my home 
site - www.shlomifish.org</a> .
</p>

<p>
OK, having put that aside - let's move on to the main topic of this post.
</p>

<hr />

<p>
Many months ago I wanted to use the
<a href="http://search.cpan.org/dist/Text-Table/">Text::Table CPAN module</a>
to present a table related to the meta-scan heuristics construction 
scheme of <a href="http://fc-solve.berlios.de/">Freecell Solver</a>. Now,
I wanted to present nicely formatted borders, using the 
<a href="http://en.wikipedia.org/wiki/Box-drawing_characters">Unicode 
box-drawing characters</a> (which some people would recall from DOS).
However, I found it difficult to specify the separators in the
rulers properly based on their indices - they were assumed to be the
same globally. As a result, I've written 
<a href="https://rt.cpan.org/Public/Bug/Display.html?id=61610">a patch</a>,
and placed the modifications in 
<a href="http://github.com/shlomif/Text-Table">a github repository</a>.
</p>

<p>
The author of Text-Table (ANNO) told me he was working on a new version
of Text-Table, which will contain many improvements. However, I was still
interested in an enhanced version of the old Text-Table codebase with my 
patch, and after talking on <a href="irc://irc.freenode.net/#perl">#perl</a>, 
ANNO said I could have co-maint
on Text-Table-1.x and continue to improve it. The new Text-Table will be 
released under a separate namespace - <tt>Text::Table2</tt> or so.
</p>

<p>
Many thanks go to ANNO for agreeing that I further develop Text::Table.
</p>

<p>
Using my git repository, I did many cleanups, like add 
pod.t and pod-coverage.t, tweak the author information, add more strict and
warnings to the file, etc. ANNO 's original licence is 
<a href="http://perlbuzz.com/2009/07/help-end-licensing-under-same-terms-as-perl-itself.html">"Same 
terms as Perl"</a>, but since it is an iffy licensing, I decided that all
further changes will be under the terms of the Public-Domain/X11L/etc.. People
who send me pull requests on github may wish to add their names to the credits
(in the changes or even in the core module) but must not claim copyrights to
their changes.
</p>

<p>
OK, now for some output of the Unicode table:
</p>

<pre>
┌───────╥─────┬──────┬─────┬────┬──────┐
│ Place ║ 1   │ 2    │ 3   │ 4  │ 5    │
├───────╫─────┼──────┼─────┼────┼──────┤
│ 1     ║ 68  │ 317  │ 15  │ 3  │ 381  │
├───────╫─────┼──────┼─────┼────┼──────┤
│ 2     ║ 171 │ 482  │ 31  │ 14 │ 594  │
├───────╫─────┼──────┼─────┼────┼──────┤
│ 3     ║ 275 │ 867  │ 42  │ 22 │ 1007 │
├───────╫─────┼──────┼─────┼────┼──────┤
│ 4     ║ 458 │ 1442 │ 125 │ 30 │ 1630 │
├───────╫─────┼──────┼─────┼────┼──────┤
│ 5     ║ 640 │ 1715 │ 137 │ 47 │ 1730 │
└───────╨─────┴──────┴─────┴────┴──────┘
</pre>

<p>
Future plans are:
</p>

<ol>

<li>
Convert the remaining test scripts to Test::More.
</li>

<li>
Go over the code and clean it up
</li>

<li>
Add CPAN keywords to the <tt>META.yml</tt>. (Perhaps this will require
defining a Module-Build-based Build.PL file).
</li>

<li>
Add URLs to the <tt>META.ym</tt>l - to the module's homepage, to the github repository, 
etc..
</li>

<li>
Possibly implement some future features.
</li>

<li>
Add some more tests.
</li>

</ol>

<p>
Contributions are naturally welcome, just fork the github repository and send
me a pull request. (Or patches are also OK.)
</p>

</div>

<div class="entry" id="entry-to-yapc-europe-2011">

<ul class="info">
<li><b>Date:</b> 20-06-2011</li>
<li class="tags">YAPC</li>
</ul>

<h1>Transferring a Ticket to YAPC::Europe::2011</h1>

<p>
I originally planned to attend 
<a href="http://yapceurope.lv/ye2011/">YAPC::Europe::2011</a> in Riga, Latvia
(on 15-17 August, 2011), and so bought an early bird ticket, but will no 
longer be able to attend due to personal reasons. As a result, I'm now seaking 
to transfer the ticket to someone else, for the right price (which will be
cheaper than what I bought it.).
</p>

<p>
If you are interested, please 
<a href="http://www.shlomifish.org/me/contact-me/">contact me</a> and we will
negotiate a price. I hope everybody enjoys the YAPCs.
</p>

</div>

<div class="entry" id="resuming-maintenance-of-xml-libxml">

<ul class="info">
<li><b>Date:</b> 20-06-2011</li>
<li class="tags">XML, libxml, CPAN</li>
</ul>

<h1>Resuming Maintenance of XML-LibXML</h1>

<p>
For a long while, work on the 
<a href="http://beta.metacpan.org/release/XML-LibXML">XML-LibXML
CPAN module</a> halted as the existing maintainer was busy.
After <a href="http://code.activestate.com/lists/perl-xml/8885/">a 
discussion</a> on the Perl-in-XML mailing list, some people and I were
given co-maintainer status and we resumed its maintenance inside
<a href="https://bitbucket.org/shlomif/perl-xml-libxml">a Bitbucket.org
Mercurial repository</a>. 
</p>

<p>
So far what I did, was fix some low-hanging fruit 
bugs, apply some patches, as well as start the long process of converting
the test suite, which still uses Test.pm to 
<a href="http://beta.metacpan.org/module/Test::More">Test::More</a> . There are
still many bugs lurking there, and some of them are XS bugs that are still
beyond my reach, and I could use some assistance there. But it's a start.
</p>

<p>
If you're interested in helping, the clone the repository, write a patch and 
send me a pull request.
</p>

<p>
<b>Text::Table Update:</b> I've written about
<a href="http://blogs.perl.org/users/shlomi_fish/2011/04/introduction-to-blogsperlorg-texttable.html">resuming 
the maintenance of Text::Table</a> in April, and it progressed nicely:
the tests were converted to Test::More, a lot of the code was cleaned up, 
the build system was converted to Module::Build, and keywords and resource
URLs were defined, and some bugs were solved (along with tests). I'm still 
looking into ways to clean up the code, and if anyone has an idea for a cool
feature, then they should drop me a line (or provide a patch).
</p>

</div>

<div class="entry" id="convert-away-from-Test.pm">

<ul class="info">
<li><b>Date:</b> 23-06-2011</li>
<li class="tags">QA, PPI, Perl</li>
</ul>

<h1>PPI-Based Script to Convert Test.pm-based Test Programs to Test::More</h1>

<p>
Some CPAN modules I inherited used the old
<a href="http://search.cpan.org/perldoc?Test">Test.pm</a> for some of their
<tt>t/*.t</tt> scripts instead of the more modern 
<a href="http://en.wikipedia.org/wiki/Test::More">Test::More</a>. This
annoys me to no end because Test.pm is very limited. When I worked on
<a href="http://beta.metacpan.org/release/Config-IniFiles">Config-IniFiles</a>,
I did the conversion manually, which was a lot of work. More recently, I 
<a href="http://blogs.perl.org/users/shlomi_fish/2011/06/resuming-maintenance-of-xml-libxml.html">started 
working on XML-LibXML</a> which has over 40 of those pesky Test.pm scripts, and 
I did not have the nerve to do all the manual and menial work.
</p>

<p>
As a result, I ended up spending a few hours studying
<a href="http://beta.metacpan.org/release/PPI">PPI</a> (the Perl Parsing
Interface), and writing
<a href="http://www.shlomifish.org/open-source/projects/Test.pm-Converter/">a 
script</a> to automatically convert Test.pm-based scripts to Test::More. The 
main issue at hand was that in Test.pm, a single argument <tt>ok()</tt>
tests for the scalar's truth, while a double argument <tt>ok()</tt> tests for 
simple equivalence (similarly to Test::More's <tt>is()</tt>). Eventually, I got 
the script working, with some limitations (see <a 
href="http://www.shlomifish.org/open-source/projects/Test.pm-Converter/">the page</a>).
</p>

<p>
So what was my impression of PPI? It naturally seems more robust than using
regular expressions and hacks to process Perl code, but there were a few quirks.
For example, a PPI
<a href="http://beta.metacpan.org/module/PPI::Structure::List">list</a> contains
an array of its contents, and the commas are part of them, as are the 
various other tokens in the sub-expressions. Therefore, divining the count of 
the  arguments is pretty hard. I would have expected to get a more <a href="http://en.wikipedia.org/wiki/Abstract_syntax_tree">abstract 
syntax tree</a> of the arguments, and since I didn't I had to work around
it with an ugly kludge.
</p>

<p>
Furthermore, after stringifying the document object, the contents of the 
<a href="http://en.wikipedia.org/wiki/Here_document">here-documents</a> were
not included in the output from some reason. However, I may have done something
wrong. I also wish the PPI PODs contained more meaningful examples.
</p>

<p>
Nevertheless, my script is mostly working now and I can utilise it to
"test-lift" legacy test programs. You might find it useful too, so it's there
in case you need it, and patches to fix its limitations would be welcome.
</p>

</div>

<div class="entry" id="Inline-C">

<ul class="info">
<li><b>Date:</b> 09-11-2011</li>
<li class="tags">Perl, QA, XS, Inline, C, ctypes, gcc</li>
</ul>

<h1>My Experience with Inline::C</h1>

<p>
I know I didn’t write here for a long time, and I apologise for it, but I have
this entry and another one in mind and I hope they can compensate for it.
</p>

<p>
For my work on <a href="http://fc-solve.shlomifish.org/">Freecell Solver</a>,
I’ve written some code for encoding and decoding game positions into a 
compact format, by encoding them as a delta from the position of origin. I 
first wrote it in Perl, in order to prototype it, and later
translated it to C (which is the language that Freecell Solver is written in).
I have written some rudimentary unit tests for it, but also wanted to test the 
code against a large number of positions, by runnign it over the solutions of
many Freecell deals. 
</p>

<p>
The encoding rearranges the order of the card columns and the freecells, so 
testing that the output test is correct requires calculating that arrangement.
This was also done by the Perl code. I decided to write a small wrapper for
an encoding+decoding round-trip in C, and use it from a Perl program I was 
writing. So far so good. 
</p>

<p>
I first looked at <a href="https://gitorious.org/perl-ctypes">the 
Perl version of Ctypes</a>, but it failed a large number of its assertions
on my system, so I could not really trust it. Then I looked at 
<a href="http://search.cpan.org/perldoc?Inline::C">Inline::C</a>. I could
not understand from its main page, how to return an <tt>SV *</tt> containing
a string from it, but this was covered in the extensive
<a href="http://search.cpan.org/perldoc?Inline::C-Cookbook">Inline::C 
cookbook</a> and I wrote this Inline::C function:
</p>

<pre>
extern char * fc_solve_user_INTERNAL_delta_states_enc_and_dec(
    const char * init_state_str_proto,
    const char * derived_state_str_proto
    );

SV* enc_and_dec(char * init_state_s, char * derived_state_s) {
    SV * ret;
    char * s;
    s = fc_solve_user_INTERNAL_delta_states_enc_and_dec(init_state_s, derived_state_s);

    ret = newSVpv(s, 0);
    free(s);
    return ret;
}
</pre>

<p>
I don't need to use “sv_2mortal” there because Inline::C does that for us.
Then I tried to test it. It failed with this error:
</p>

<pre>
perl: symbol lookup error: /home/shlomif/progs/freecell/trunk/fc-solve/source/_Inline/lib/auto/Mega_Test_for_C_delta_states_pl_9385/Mega_Test_for_C_delta_states_pl_9385.so: undefined symbol: fc_solve_user_INTERNAL_delta_states_enc_and_dec
</pre>

<p>
I was familiar with errors like that, but it took me over an hour of playing
with the various Inline::C configuration options, and trying to figure out 
why it didn’t link against the relevant Freecell Solver library to realise
what the problem was. It was that the library in question did not export the
symbol, and gcc realised it didn't give the XS extension anything and omitted 
it.
</p>

<p>
After fixing this line in my C source:
</p>

<pre>
char * DLLEXPORT fc_solve_user_INTERNAL_delta_states_enc_and_dec(
</pre>

<p>
To this line:
</p>

<pre>
DLLEXPORT char * fc_solve_user_INTERNAL_delta_states_enc_and_dec(
</pre>

<p>
Everything worked properly, and I was able to run the so-called “mega-test”.
</p>

<p>
If you’re having similar problems with Inline::C, you should try to add
<tt>CLEAN_AFTER_BUILD =&gt; 0</tt> to its configuration. It ended up clarifying
a lot for me.
</p>

<p>
Cheers!
</p>

</div>

<div class="entry" id="exec-portability">

<ul class="info">
<li><b>Date:</b> 09-11-2011</li>
<li class="tags">exec, perl, portability, whitespace, windows, unix</li>
</ul>

<h1>exec's portability</h1>

<p>
Pop quiz! What does this perl 5 program prints when executed with no
arguments?
</p>

<pre>
#!/usr/bin/perl

use strict;
use warnings;

if (! @ARGV)
{
    exec($^X, $0, "hello world");
}
else
{
    my $arg = shift(@ARGV);
    print "Got &lt;$arg&gt;\n";
    if (@ARGV)
    {
        print "Other args are &lt;@ARGV&gt;\n";
    }
}
</pre>

<p>
The answer is “it depends.”. On my Linux system it prints 
“Got &lt;hello world&gt;”, while on Windows, using Strawberry Perl, it
prints “Got &lt;hello&gt;” and later on that the other args are “world”.
</p>

<p>
I would expect the Linux behaviour were every argument passed to the list 
<a href="http://perldoc.perl.org/functions/exec.html">exec</a> arrives as
one argument to <tt>@ARGV</tt> regardless of whitespace as the correct. It
also the behaviour exhibited on both operating systems using 
<a href="http://perldoc.perl.org/functions/system.html">system</a>. Is this
a bug?
</p>

<p>
<a href="http://perldoc.perl.org/perlport.html">perlport</a> only has this
to say about whitespace: <q>Whitespace in filenames is tolerated on most
systems, but not all, and even on systems where it might be tolerated, some
utilities might become confused by such whitespace.</q>.
</p>

<p>
I discovered this strange mis-behaviour when working on a commission for
a client who is Windows-based.
</p>

</div>

<div class="entry" id="telaviv_pm_2011_Nov_report">

<ul class="info">
<li><b>Date:</b> 01-12-2011</li>
<li class="tags">Perl, Mongers, Tel Aviv, Israel, meeting, DBI, DBIx-Class, local-lib, perlbrew, cpanminus, CPAN, Firebird, SQL</li>
</ul>

<h1>Report on the Latest Tel Aviv Perl Mongers Meeting</h1>

<p>
I attended the latest
<a href="http://telaviv.pm.org/">Tel Aviv Perl Mongers (TelAviv.pm)</a>
meeting the other
day, and am writing this report in order to encourage more people
to come. We didn't have meetings in September or October due to the Jewish
holidays and some renovations on the site, so it was good to finally have
a meeting.
</p>

<p>
Before the meeting, I had helped publicise it on various online news channels,
and thankfully quite a few people (about 20-30) came. I had a previous 
appointment that day at 12:00, and so returned home where I ate, worked on
the computer, and rested before the TelAviv.pm meeting.
</p>

<p>
After I rode the bus, I arrived there a few minutes earlier. I met a fellow
Perl monger on the way. We found the room with some difficulty, as there were
very few signs outside the doors of the various rooms in the building. Several 
people 
including  <a href="http://szabgab.com/">Gabor</a> were already sitting
in the room.
They were discussing the upcoming Israeli Perl Workshop in February. In any
case, I decided to walk to the nearby 
grocery store to buy some refreshments for the meeting, and when I returned
there were more people in the room.
</p>

<p>
Quite a few people arrived relatively late, but the talks started mostly on
schedule. The first talk (by Erez Schatz) was short, and it discussed some 
recent tools that
facilitate the Perl programmer’s life: <a href="http://search.cpan.org/dist/local-lib/">local-lib</a>, <a href="http://www.perlbrew.pl/">perlbrew</a>, cpanm
and pm-uninstall. The talk was very fun, and he ended up covering some other
tools in brief in the last slide. I’m still not convinced that I should use
CPAN-Minus instead of my CPANPLUS (especially given 
<a href="http://search.cpan.org/dist/CPANPLUS-Dist-Mageia/">CPANPLUS-Dist-Mageia</a> 
and friends), but I still like perlbrew and local::lib and pm-uninstall seems 
useful.
</p>

<p>
Erez mentioned that on Perl forums there were several very common and hated 
questions like “How do I uninstall a perl module?” or “How can I use
CPAN without root?” and that these technologies address these needs precisely.
</p>

<p>
After this talk, Erez gave a longer talk about DBIx-Class, which is an
Object-Relational Mapper (ORM) for Perl. For the demo, he used a company
whose employees are dogs, and the slides featured many pictures of dogs in 
suits (some of them pretty scary). There were a few glitches in the 
demonstration, but they
were promptly overcome, and the <tt>DBIC_TRACE=1</tt> flag was a big help.
One bug in the code was that instead of updating the employee's department
(by looking it up by name), the department's name was updated (globally). I
any case, it was an enjoyable talk, but the person who sat next to me said
that she didn’t like it because she used to be a DBA, and she was worried about
performance.
</p>

<p>
Erez mentioned that DBIx-Class was the “Elephant in the Room” of Perl ORMs,
which I had concluded was the case as well.
</p>

<p>
After that talk, there was a break, where people got to eat more of the
cookies I bought and to chat. Afterwards, Ido Kanner presented about 
<a href="http://www.firebirdsql.org/">Firebird SQL</a>. It was a good talk,
and Ido drew some comparisons between Firebird and SQLite, MySQL and
PostgreSQL. Firebird looks interesting and it also has embedded (like
SQLite) and read-only modes.
</p>

<p>
One problem during the talk was that the projector kept shutting down,
and it took us some trouble to restart it. We hoped this problem would be
resolved in upcoming meetings.
</p>

<p>
After the meeting, some of us (about 10) went to Spaghettim (a pasta/etc. 
place) and had dinner. We chatted about Atheism, Cable company tech-support,
GNOME 3 and KDE 4, and lots of other stuff. This time I had a pizza, which
although not too bad, made me realise I will be ordering pasta there from now
on.
</p>

<p>
To sum up, it was a very enjoyable meeting, and I’m looking forward for
more future ones. One thing notable about it is that this time Sawyer did not
deliver a talk, which made him happy because other people volunteered to do
so instead.
</p>

</div>

<!-- TODO:
* DBIx-Class.
* What the person next to me said about not liking it because she used to be a
DBA.
* Dogs in suits.
* Undesirable bugs in the demo.
* ->update({ name => ... }) updating the department's name instead of the
department field of the employee.
* Firebird SQL.
* Looks intersting.
    - embedded/read-only modes.
* The projector keeps shutting down.
* Going to Spaghettim for Supper.
* Chat about Atheism, Cable tech-support, etc.
-->
</body>
</html>
